" XDG config
set undodir=$XDG_DATA_HOME/vim/undo//
set directory=$XDG_DATA_HOME/vim/swap//
set backupdir=$XDG_DATA_HOME/vim/backup//
set runtimepath+=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
set packpath+=$XDG_CONFIG_HOME/vim

set viminfo='100,<1000,s100,h

if !has('nvim')
    set viminfofile=$XDG_DATA_HOME/vim/viminfo
endif


filetype indent plugin on

set guifont=DejaVu\ Sans\ Mono
set background=dark

set nomodeline                                           " disable modeline parsing
set lazyredraw                                           " redraw only when we need to.

set history=1000                                         " remember more commands and search history
set undolevels=1000                                      " use many muchos levels of undo

set noerrorbells                                         " don't beep
set visualbell                                           " don't beep

set hidden
set nrformats=                                           " make <C-a> and <C-x> play well with zero-padded numbers (i.e. don't consider them octal or hex)
set virtualedit=all                                      " allow the cursor to go in to "invalid" places
set backspace=indent,eol,start                           " allow backspacing over everything in insert mode

set softtabstop=4                                        " number of spaces in tab when editing
set tabstop=4                                            " number of visual spaces per TAB
set shiftwidth=4                                         " Number of spaces to use for each step of (auto)indent
set shiftround                                           " round indent to multiple of shiftwidth when using < or >
set expandtab                                            " use space instead of tab character

set hlsearch                                             " highlight matches
set showmatch                                            " highlight matching [{()}]
set ignorecase
set incsearch                                            " search as characters are entered
set smartcase

set cursorline                                           " highlight current line
syntax on                                                " Enable syntax highlighting
set number                                               " show line numbers

set showbreak=↪\ 
set listchars=tab:»-,nbsp:␣,trail:·,extends:»,precedes:«
set list

set colorcolumn=80,120                                   " set column guides
" highlight ColorColumn ctermbg=black guibg=Black          " background color for column guides


set ruler                                                " Display the cursor position on the last line of the screen or in the status line of a window
set showcmd                                              " show command in bottom bar
set showmode                                             " always show what mode we're currently editing in
set wildmenu
set laststatus=2                                         " Always display the status line, even if only one window is displayed

set statusline=%F%m%r%h%w
set statusline+=\ [
set statusline+=ASCII=\%04.8b
set statusline+=\ \|\ 
set statusline+=HEX=\%04.4B
set statusline+=]
set statusline+=%=
set statusline+=\ [
set statusline+=%{&ft==\"\"?\"no\ ft\":&ft}
set statusline+=\ \|\ 
set statusline+=%{&ff}
set statusline+=\ \|\ 
set statusline+=%{\(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")\}
set statusline+=%{&endofline?'':'\ \ \|\ noeol'}
set statusline+=]
set statusline+=\ [
set statusline+=%l
set statusline+=:
set statusline+=%v
set statusline+=\/
set statusline+=%L
set statusline+=]



let mapleader = "\<Space>"

" Write as sudo
cnoremap w!! w !sudo tee % >/dev/null

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy
map Y y$

" Clear highlights
nnoremap <C-L> :nohl<CR><C-L>
nnoremap <leader><leader> :nohl<CR>

" Select last inserted text
nnoremap gV `[v`]

" move by visual line
noremap j gj
noremap k gk
noremap gj j
noremap gk k
"noremap 0 g0
"noremap $ g$
onoremap j gj
onoremap k gk
onoremap gj j
onoremap gk k

" Parse modeline
nnoremap <leader>ml :setlocal invmodeline <bar> doautocmd BufRead <bar> setlocal invmodeline<cr>

" System clipboard interaction
noremap <leader>y "+y
noremap <leader>p :set paste<CR>"+p:set nopaste<CR>
noremap <leader>P :set paste<CR>"+P:set nopaste<CR>
vnoremap <leader>y "+ygv

" Apply macro from q register
nnoremap Q @q
vnoremap Q :norm @q<cr>

nnoremap <leader>q :q!<cr>

if has('mouse')
    set mouse=a
endif

" if has('clipboard')
"     set clipboard=unnamed,unnamedplus
" endif

" enable cursor change in WSL when switch to/from insert and normal mode
let &t_SI.="\e[5 q"
let &t_SR.="\e[4 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"
let &t_ti.="\e[1 q"

let g:solarized_termcolors=256
let g:solarized_visibility="high"
silent! colorscheme solarized

" load vim-surround keymaps for vim-sanwich
runtime macros/sandwich/keymap/surround.vim


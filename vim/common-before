" vim: foldmethod=marker formatoptions-=o filetype=vim

if &compatible
  set nocompatible
endif

if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_STATE_HOME)  | let $VIMDATA = expand('~/.local/state/vim/') | else | let $VIMDATA = $XDG_STATE_HOME.'/vim/'     | endif
if empty($XDG_CONFIG_HOME) | let $VIMCONFIG  = expand('~/.config/vim/')   | else | let $VIMCONFIG = $XDG_CONFIG_HOME.'/vim/' | endif

set runtimepath^=$VIMCONFIG
set runtimepath+=$VIMCONFIG/after
set packpath^=$VIMCONFIG
set packpath+=$VIMCONFIG/after


source $XDG_CONFIG_HOME/vim/keybinding

" Basic keymap, commands {{{
command! ClearQuickfixList cexpr []
command! ClearTrailingWhitespaces %s/\s\+$//e

command! -range=% YamlToJson :execute '<line1>,<line2>!yq eval --tojson -' <BAR> set ft=json
command! -range=% JsonToYaml :execute '<line1>,<line2>!yq eval --prettyPrint -' <BAR> set ft=yaml
command! -range=% PrettyCsv :set nowrap <BAR> execute '<line1>,<line2>!column -s, -t'

" History, undo, state, session etc. {{{
" set backupdir=$VIMDATA/backup// | call mkdir(&backupdir, 'p')
set directory=$VIMDATA/swap//   | call mkdir(&directory, 'p')
set viewdir=$VIMDATA/views//    | call mkdir(&viewdir, 'p')

set nobackup
set nowritebackup
set undofile                                     " enable persistent undo
set viminfo='100,<1000,s100,h
set history=10000                                " search and cmd line history
set undolevels=1000                              " in-memory undo count

augroup Vimrc_Undo
    autocmd!
    " disable persistent undo for files in tmp (eg: for sudoedit-ed files)
    autocmd BufWritePre /tmp/* setlocal noundofile
    autocmd BufWritePre /var/tmp/* setlocal noundofile
augroup END
" }}}

" Plugin config {{{
let g:netrw_home = $VIMDATA
let g:netrw_preview = 1
let g:netrw_alto = 0

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

let g:no_CamelCaseMotion_maps = 1
map <leader>w <Plug>CamelCaseMotion_w
map <leader>b <Plug>CamelCaseMotion_b
map <leader>e <Plug>CamelCaseMotion_e
omap <leader>iw <Plug>CamelCaseMotion_iw
xmap <leader>iw <Plug>CamelCaseMotion_iw
omap <leader>ib <Plug>CamelCaseMotion_ib
xmap <leader>ib <Plug>CamelCaseMotion_ib
omap <leader>ie <Plug>CamelCaseMotion_ie
xmap <leader>ie <Plug>CamelCaseMotion_ie
" }}}

" Display {{{
if &t_Co >= 256
  set termguicolors
end

" Terminal support
" Handle cursor shape change in insert/normal/replace modes
" 1 or 0 -> blinking block 2 -> solid block 3 -> blinking underscore
" 4 -> solid underscore 5 -> blinking vertical bar 6 -> solid vertical bar
if exists("&t_SI") | let &t_SI .= "\e[5 q" | endif
if exists("&t_EI") | let &t_EI .= "\e[2 q" | endif
if exists("&t_SR") | let &t_SR .= "\e[1 q" | endif

set background=dark

set number
set showmode
set showcmd

set cursorline
set colorcolumn=80,120

set showbreak=↪\ 
set listchars=tab:»-,nbsp:␣,trail:·,extends:»,precedes:«
set list

set splitbelow
set splitright

set linebreak               " don't cut words into pieces on line break

set lazyredraw

set display+=lastline

set shortmess-=S            " show matches count on search

set foldlevelstart=99       " open folds by default
set foldcolumn=auto
" }}}

" Statusline {{{
set laststatus=2
set statusline=%F%m%r%h%w
set statusline+=\ [ASCII=%04.8b
set statusline+=\ \|
set statusline+=\ HEX=%04.4B]
set statusline+=%=
set statusline+=\ [%{&ft==''?'no\ ft':&ft}
set statusline+=\ \|
set statusline+=\ %{&ff}
set statusline+=\ \|
set statusline+=\ %{(&fenc==''?&enc:&fenc).((exists('+bomb')&&&bomb)?',B':'')}
set statusline+=%{&endofline?'':'\ \ \|\ noeol'}]
set statusline+=\ [%l:%c%V/%L]
" }}}

" Security, modeline {{{
set nomodeline
set modelines=2
" parse modeline with keybinding
nnoremap <leader>ml :setlocal modeline <BAR> doautocmd BufRead <BAR> setlocal nomodeline<CR>
" }}}

" Basic operation, mouse {{{
set backspace=indent,eol,start
set autoindent
set hidden

set virtualedit=block
set nrformats-=octal          " <C-a> and <C-x> with zero-padded numbers (don't consider them octal)

if has('mouse')
    set mouse=a
endif
" }}}

" Wildmenu, completion {{{
set wildmenu
set wildignorecase
set wildmode=longest:full,full
set completeopt=menuone,preview
" }}}

" Whitespace {{{
set softtabstop=-1                                       " number of spaces in tab when editing - when -1 use shiftwidth
set tabstop=4                                            " number of visual spaces per TAB character
set shiftwidth=0                                         " Number of spaces to use for each step of (auto)indent (<<, >>) - when 0 use tabstop
set shiftround                                           " round indent to multiple of shiftwidth when using < or >
set expandtab                                            " use space instead of tab character
" }}}

" Search/Replace {{{
set hlsearch                                             " highlight matches
set showmatch                                            " highlight matching [{()}]
set ignorecase
set incsearch                                            " search as characters are entered
set smartcase
" }}}

" Syntax, colorscheme {{{
syntax on
silent! colorscheme PaperColor
" }}}

" Version, feature depentent {{{
" skip runtimepath and packpath on Session file save
if has("patch-8.2.2772")
    set sessionoptions+=skiprtp
endif

if has("patch-8.1.0360") || has("nvim")
    set diffopt+=internal
    set diffopt+=algorithm:histogram
    set diffopt+=indent-heuristic
endif
" }}}

" Diff current modified buffer to the file on the disk {{{
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
        \ | wincmd p | diffthis
endif
" }}}

" Ask for directory creation on save/new file {{{
augroup Vimrc_EnsureDirExists
    autocmd!
    autocmd  BufNewFile,BufWritePre  *  :call <SID>EnsureDirExists()
augroup END
function! s:EnsureDirExists ()
    if (&ft == 'oil')
        return
    endif
    let required_dir = expand("%:h")
    if !isdirectory(required_dir)
        if confirm("Directory '" . required_dir . "' doesn't exist.", "&Abort?\n&Create it?") == 2
            call mkdir( required_dir, 'p' )
        endif
    endif
endfunction
" }}}

" Redirect command output to a scratch buffer {{{
" from: https://gist.github.com/romainl/eae0a260ab9c135390c30cd370c20cd7
function! Redir(cmd, rng, start, end)
    for win in range(1, winnr('$'))
        if getwinvar(win, 'scratch')
            execute win . 'windo close'
        endif
    endfor
    if a:cmd =~ '^!'
        let cmd = a:cmd =~' %'
            \ ? matchstr(substitute(a:cmd, ' %', ' ' . expand('%:p'), ''), '^!\zs.*')
            \ : matchstr(a:cmd, '^!\zs.*')
        if a:rng == 0
            let output = systemlist(cmd)
        else
            let joined_lines = join(getline(a:start, a:end), '\n')
            let cleaned_lines = substitute(shellescape(joined_lines), "'\\\\''", "\\\\'", 'g')
            let output = systemlist(cmd . " <<< $" . cleaned_lines)
        endif
    else
        redir => output
        execute a:cmd
        redir END
        let output = split(output, "\n")
    endif
    vnew
    let w:scratch = 1
    setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile
    call setline(1, output)
endfunction
command! -nargs=1 -complete=command -bar -range Redir silent call Redir(<q-args>, <range>, <line1>, <line2>)
" }}}

" Ripgrep {{{
if executable('rg')
    set grepprg=rg\ --search-zip\ --follow\ --hidden\ --vimgrep\ --no-messages\ --no-binary\ $*
    set grepformat^=%f:%l:%c:%m
    nnoremap <leader>g :silent execute "grep! -F " . shellescape(expand("<cWORD>")) . " ."<CR>:copen <BAR> redraw!<CR>
    xnoremap <leader>g y :silent execute "grep! -F " . shellescape(getreg('"')) . " ."<CR>:copen <BAR> redraw!<CR>
endif
" }}}

" Handle ctrl+arrows under tmux in insert and command-line mode {{{
if &term == "tmux-256color"
    map!  <Esc>[1;5A <C-Up>
    map!  <Esc>[1;5B <C-Down>
    map!  <Esc>[1;5D <C-Left>
    map!  <Esc>[1;5C <C-Right>
    map!  <Esc>[1;2D <S-Left>
    map!  <Esc>[1;2C <S-Right>
endif
" }}}

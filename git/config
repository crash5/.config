[user]
    name = Imre NAGY
    email = crash@veluna.eu
[color]
    ui = auto
[alias]
    branch-name = rev-parse --abbrev-ref HEAD
    branch-name-tracking = rev-parse --abbrev-ref --symbolic-full-name "@{u}"
    ctags = "!$XDG_CONFIG_HOME/git/template/hooks/ctags"

    pullas = pull --autostash

    p = push
    pf = push --force-with-lease --force-if-includes
    pushu = !git push -u origin $(git branch-name)
    preview = "!f() { : git checkout ; git push origin HEAD:refs/for/\"${@:?Missing parameter (branch, etc.)}\"; }; f"
    pdraft = "!f() { : git checkout ; git push --no-verify origin HEAD:refs/drafts/\"${@:?Missing parameter (branch, etc.)}\"; }; f"
    ; preview = "!f() { : git checkout ; git push origin HEAD:refs/for/\"${@:?Missing parameter (branch, etc.)}\"%ready; }; f"
    ; pdraft = "!f() { : git checkout ; git push --no-verify origin HEAD:refs/for/\"${@:?Missing parameter (branch, etc.)}\"%wip; }; f"
    co = checkout
    cos = "!f() { git fetch -q && git co $(git brr | fzf --tac -q ${1:-''} | awk '{ print $1 }'); }; f"
    cod = checkout --detach

    br = branch -vv
    bra = !git br -a
    brr = !git br -r

    ci = commit
    cia = commit --amend
    ciane = commit --amend --no-edit
    cif = commit --fixup
    cifs = "!f() { hash=$(git ll | fzf --preview 'git s {+2}' --preview-window right:wrap:nohidden) && hash=$(echo \"$hash\" | cut -d ' ' -f 2) || return ; git commit --fixup=\"${hash}\" \"${@}\"; }; f"
    cis = commit --squash
    ff = "!f() { git commit --fixup=$(git log --all --full-history -1 --format=format:%h -- \"$1\") \"${@}\"; }; f"
    ff-develop = "!f() { git commit --fixup=$(git log $(git merge-base develop HEAD)..HEAD --full-history -1 --format=format:%h -- \"$1\") \"${@}\"; }; f"

    addp = !git_add_gui
    adds = "!f() { selection=$(git diffn | fzf --preview 'git diff --color {+1}' --preview-window right:wrap:nohidden) && selection=$(echo \"$selection\") || return ; git add \"${selection}\" \"${@}\"; }; f"

    cl = clone
    st = status
    stn = status --untracked-files=no
    sta = status --untracked-files=all

    s = show --pretty=fuller --name-status
    ss = show --pretty=fuller --patch

    dt = difftool -y
    dtt = difftool
    dtc = difftool --cached -y
    dtcc = difftool --cached

    dtd = difftool --dir-diff
    dtdoc = !git dtd $1^
    dtdc = !git dtd --cached
    dtds = !git dtd stash
    dtdu = !git dtd @{u}
    dtdse = "!f() { git fetch -q && git dtd $(git brr | fzf --tac -q ${1:-''} | awk '{ print $1 }'); }; f"

    diffc = diff --cached
    diffcw = diff --cached --color-words
    diffu = diff @{u}
    diffn = diff --name-only
    diffns = diff --name-status
    diffw = diff --color-words
    diffurange = range-diff @{u}...@
    diffrange-rebase = range-diff @{1}...HEAD
    dr = diff HEAD@{1}
    dr2 = diff HEAD@{2}
    diffs = "!f() { selection=$(git diffn | fzf --preview 'git diff --color {+1}' --preview-window right:wrap:nohidden) && selection=$(echo \"$selection\") || return ; git diff \"${selection}\" \"${@}\"; }; f"

    diffp = diff --diff-algorithm=patience
    diffm = diff --diff-algorithm=myers
    diffmm = diff --diff-algorithm=minimal

    mt = mergetool

    lp = log --pretty=log
    ll = lp --graph --date=short
    l = ll -25
    ls = log --pretty=fuller --name-status
    lss = log --pretty=fuller --patch
    ld = !git l $(git merge-base develop HEAD)..HEAD
    mostchangedayear = "!git log --format=format: --name-only --since=12.month | egrep -v '^$' | sort | uniq -c | sort -nr | head -50"

    rll = reflog --pretty=rlog
    rl = rll -25
    rls = reflog --pretty=fuller --name-status
    rlss = reflog --pretty=fuller --patch

    sll = stash list --pretty=slog
    sl = sll -25
    sls = stash list --pretty=fuller --name-status
    slss = stash list --pretty=fuller --patch

    unstage = "reset HEAD --"
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rs = reset --soft
    rs1 = reset --soft HEAD^
    rh = reset --hard
    rh1 = reset --hard HEAD^
    rh2 = reset --hard HEAD^^
    rhu = reset --hard @{u}

    rei = rebase -i
    reis = "!f() { git rebase --interactive $(git ll | fzf --preview 'git s {+2}' --preview-window right:wrap:nohidden | cut -d ' ' -f 2)^ \"${@}\"; }; f"
    reiu = rebase -i @{u}
    rec = rebase --continue
    rea = rebase --abort
    rei-develop = !git rebase -i $(git merge-base develop HEAD)
    reshow = show REBASE_HEAD

    cleanrepo = clean -dfx
    pruneorigin = remote prune origin
    gones = !git fetch -q -p && git branch -vv | awk '/: gone]/{print $1}'
    deletegones = !git gones | xargs -n 1 -r -p git branch -d
    deletegones-force = !git gones | xargs -n 1 -r -p git branch -D
    deletegonesnoask = !git gones | xargs -n 1 -r git branch -d
    deletegonesnoask-force = !git gones | xargs -n 1 -r git branch -D

    ; Assumes that a developer shouldn’t change a file.
    ; This flag is meant for improving performance for not-changing folders like SDKs.
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumedlist = !git ls-files -v | grep ^h | cut -c 3-

    ; Instruct git not to touch a specific file ever because developers should change it.
    ; For example, if the main repository upstream hosts some production-ready configuration files
    ; and you don’t want to accidentally commit changes to those files.
    skipworktree = update-index --skip-worktree
    unskipworktree = update-index --no-skip-worktree
    skipworktreelist = !git ls-files -v | grep ^S | cut -c 3-

    worktreeaddupdir = "!git worktree add ../$1"

    snap = "!git stash push -m \"snapshot: $(date +'%Y. %m. %d. %H:%M')\" && git stash apply -q stash@{0}"
    #stashold = "!git log --merges --no-walk --oneline $(git fsck --unreachable | grep commit | cut -d' ' -f3)"
    stashold = "!git lp --merges --no-walk $(git fsck --unreachable | grep commit | cut -d' ' -f3)"

    vic = "!vim $(git diff --name-only)"
    vicc = "!vim $(git show --name-only --pretty=)"
[core]
    #editor = notepad++.exe -multiInst -nosession -noPlugin -ldiff
    editor = vim
    autocrlf = input
    pager = less -x4 -+X # enable mouse wheel scroll in mintty
    ignorecase = false
    hooksPath = ~/.config/git/template/hooks
[log]
    date = format:%Y-%m-%d %H:%M:%S
[commit]
    verbose = true
[pull]
    rebase = true
[rebase]
    autoSquash = true
    stat = true
    missingCommitsCheck = warn
    updateRefs = true
[difftool "bc"]
    cmd = BComp.exe "$LOCAL" "$REMOTE"
[mergetool "bc"]
    cmd = BComp.exe "$LOCAL" "$REMOTE" "$BASE" "$MERGED"
    trustExitCode = false
    keepBackup = false
[difftool "bcwsl"]
    cmd = BComp.exe "$(wslpath -aw $LOCAL)" "$(wslpath -aw $REMOTE)"
[mergetool "bcwsl"]
    cmd = BComp.exe "$(wslpath -aw $LOCAL)" "$(wslpath -aw $REMOTE)" "$(wslpath -aw $BASE)" "$(wslpath -aw $MERGED)"
    trustExitCode = false
    keepBackup = false
[diff]
    tool = bc
    colorMoved = zebra
    indentHeuristic = true
    algorithm = histogram
    wsErrorHighlight = all
[merge]
    tool = bc
    summary = true
    conflictstyle = zdiff3
[mergetool]
    keepBackup = false
[rerere]
    enabled = true
[init]
    defaultBranch = master
[help]
    autocorrect = 0
[pretty]
    log = %C(auto)%h %C(green)%cd%C(reset) | %C(cyan)%s%C(auto)%d [%C(bold blue)a:%aN%C(reset),%C(blue)c:%cN%C(reset)]
    rlog = %C(auto)%h %C(bold red)%gd%C(reset): %gs %C(cyan)[%s]%C(auto)%d
    slog = %C(bold red)%gd%C(reset): %C(cyan)%s%C(auto)%d
[url "ssh://git@github.com/"]
    pushInsteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
    pushInsteadOf = https://gitlab.com/
[safe]
    bareRepository = explicit

# Put things before this so it can be overridden locally
[include]
    path = ~/.local/config/gitconfig
